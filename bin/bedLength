#!/usr/bin/perl

#
# Copyright 2019 Luciano Xumerle. All rights reserved.
# Luciano Xumerle <luciano.xumerle@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use warnings;

my $cmd = $0;
$cmd =~ s/^.*\///;
print STDERR
  qq{---------------------------------------------------------------------------
$cmd version 0.1.0 (Aug 8, 2019)
Copyright 2015-2019 by Luciano Xumerle <luciano.xumerle\@gmail.com>
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
---------------------------------------------------------------------------

SYNTAX:

 > $cmd [-noMerge] <file1.bed> ... [fileN.bed]

The script merges overlapping regions.
Use "-noMerge" to sum all regions.

};

my @bed     = ();
my $noMerge = 0;

foreach my $f (@ARGV)
{
    if ( $f eq "-noMerge" )
    {
        $noMerge++;
    }
    elsif ( -f $f && $f =~ m/bed/i )
    {
        push @bed, $f;
    }
}

foreach my $bed (@bed)
{
    print join( "\t", $bed, &getLength( $bed, $noMerge ) ), "\n";
}

sub getLength
{
    my $bed = shift;
    my $nm  = shift;

    my $noMerge = 0;
    my %h       = ();

    if ( $bed =~ m/gz$/ )
    {
        open( FILE, "gzip -dc $bed | " ) || die;
    }
    else
    {
        open( FILE, $bed ) || die;
    }
    while (<FILE>)
    {
        chomp;
        s/\s*$//;
        my @a = split /\t/;
        next if ( !defined $a[2] || $a[1] !~ m/^\d+$/ || $a[2] !~ m/^\d+$/ );
        $noMerge += ( $a[2] - $a[1] );
        push @{ $h{ $a[0] } }, [ $a[1], $a[2] ];
    }
    close FILE;

    # finished if noMerge activated
    return $noMerge if ( defined $nm && $nm > 0 );

    my @region = ();
    my $total  = 0;
    foreach my $chr ( keys %h )
    {
        push @region, [ 0, 0 ];
        foreach my $e ( sort { $a->[0] <=> $b->[0] } @{ $h{$chr} } )
        {
            if ( $region[-1]->[0] == 0 && $region[-1]->[1] == 0 )
            {
                $region[-1] = $e;
            }
            else
            {
                if ( $region[-1]->[1] < $e->[0] )
                {
                    push @region, $e;
                }
                else
                {
                    $region[-1]->[1] = $e->[1]
                      if ( $e->[1] > $region[-1]->[1] );
                }
            }
        }
    }
    foreach my $e (@region) { $total += ( $e->[1] - $e->[0] ) }
    return $total;
}
