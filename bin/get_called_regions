#!/usr/bin/perl

#
# Copyright 2018 Luciano Xumerle. All rights reserved.
# Luciano Xumerle <luciano.xumerle@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use warnings;

my $cmd = $0;
$cmd =~ s/^.*\///;
print STDERR
  qq{---------------------------------------------------------------------------
$cmd version 0.0.1 (Oct 13, 2018)
Copyright 2018 by Luciano Xumerle <luciano.xumerle\@gmail.com>
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
---------------------------------------------------------------------------

SYNTAX:

 > cat genome.vcf | $cmd > callableRegions.bed

};

my @a   = ();
my $ll  = 0;
my @old = ( 0, 0, 0 );
while (<STDIN>)
{
    chomp;
    if (m/\tPASS\t/)
    {
        @a = split "\t";
        my $start = $a[1] - 1;
        my $stop  = $a[1];

        # if reference region there is a end position
        if ( $a[7] =~ m/END=(\d+)/ )
        {
            $stop = $1;
        }
        else
        {
            $ll = length( $a[3] );
            foreach my $l ( split ',', $a[4] )
            {
                if ( length($l) != $ll )
                {
                    $stop += $ll - 1;
                    $start++;
                    last;
                }
            }
        }

        if ( $old[-1] >= $start && $a[0] eq $old[0] )
        {
            $old[-1] = $stop if ( $stop > $old[-1] );
        }
        else
        {
            print join( "\t", @old ), "\n" if ( $old[-2] < $old[-1] );
            @old = ( $a[0], $start, $stop );
        }
    }
}
print join( "\t", @old ), "\n" if ( $old[-2] < $old[-1] );
