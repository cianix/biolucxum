#!/usr/bin/perl
#
# Copyright 2018-2021 Luciano Xumerle. All rights reserved.
# Luciano Xumerle <luciano.xumerle@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use warnings;

my $cmd = $0;
$cmd =~ s/^.*\///;
print STDERR
  qq{---------------------------------------------------------------------------
$cmd version 0.0.5 (Oct 19, 2021)
Copyright 2018-2021 by Luciano Xumerle <luciano.xumerle\@gmail.com>
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
---------------------------------------------------------------------------
SYNTAX:
 >  $cmd [-md] [-dw] [-ht] <file.tsv>

PARAMETERS:
 -md : markdown output
 -dw : dokuwiki output
 -ht : html table output
-tex : LaTeX table output

All the output formats are printed by default.
};

my $md  = 0;
my $dw  = 0;
my $ht  = 0;
my $tex = 0;
my $tsv = '';

foreach my $f (@ARGV)
{
    if ( -f $f )
    {
        $tsv = $f;
    }
    else
    {
        if ( $f =~ m/-md/ )  { $md++; }
        if ( $f =~ m/-dw/ )  { $dw++; }
        if ( $f =~ m/-ht/ )  { $ht++; }
        if ( $f =~ m/-tex/ ) { $tex++; }
    }
}

if ( $tex + $md + $dw + $ht == 0 )
{
    $md++;
    $dw++;
    $ht++;
    $tex++;
}

# these are global vars used also in functions
my @lines = ();
my %ln    = ();

&loadTSV($tsv);

if ( $ht > 0 )
{
    &tsv2html();
    print "\n\n";
}
if ( $dw > 0 )
{
    &dokuwiki();
    print "\n\n";
}
if ( $md > 0 )
{
    &markdown();
    print "\n\n";
}

if ( $tex > 0 )
{
    &tsv2latex();
    print "\n\n";
}

sub loadTSV
{
    my $file = shift;

    open( FILE, $file ) || die "SYNTAX:\n\n - $0 <file.tsv>\n\n";
    while (<FILE>)
    {
        chomp;

        my @a = split "\t", $_ . "\ta";
        pop @a;

        for ( my $i = 0 ; $i <= $#a ; $i++ )
        {
            $ln{$i} = length( $a[$i] )
              if ( !defined $ln{$i} || $ln{$i} < length( $a[$i] ) );
        }

        push @lines, \@a;
    }
    close FILE;
}

sub markdown
{
    my $prima = 0;
    my @ll    = ();

    foreach my $row (@lines)
    {

        for ( my $i = 0 ; $i <= $#{$row} ; $i++ )
        {
            while ( length( $row->[$i] ) < $ln{$i} )
            {
                $row->[$i] = ' ' . $row->[$i];
            }
        }

        print '| ' . ( join ' | ', @$row ) . ' |' . "\n";

        if ( $prima < 1 )
        {
            my @ll = ();
            foreach my $i ( sort { $a <=> $b } keys %ln )
            {
                push @ll, '-' x $ln{$i};
            }
            print '| ' . ( join ' | ', @ll ) . ' | ' . "\n";
        }

        $prima++;
    }
}

sub dokuwiki
{
    my $prima = 0;

    foreach my $r (@lines)
    {

        if ( $prima < 1 )
        {
            print join( '^', '', @$r, '' ), "\n";
            $prima++;
        }
        else
        {
            print join( '|', '', @$r, '' ), "\n";
        }
    }
}

sub tsv2html
{
    my @out = ('<table>');
    foreach my $r (@lines)
    {
        push @out, '<tr><td>' . ( join '</td><td>', @$r ) . '</td></tr>';
    }
    push @out, '</table>';
    print join "\n", @out, '';
}

sub tsv2latex
{
    print q|\documentclass{standalone}
\begin{document}|, "\n";

    my @columns = ('');
    foreach ( @{ $lines[0] } ) { push @columns, ' c '; }
    push @columns, '';
    my $def = join '|', @columns;
    $def = qq|\\begin{tabular}{$def}|;
    my @out = ( $def, '\\hline' );

    foreach my $l (@lines)
    {
        my @row = ();
        foreach my $f (@$l)
        {
            $f =~ s/_/\\_/g;
            $f =~ s/%/\\%/g;
            $f =~ s/#/\\#/g;
            push @row, $f;
        }
        my $nn = join ' & ', @row;
        push @out, $nn . ' \\\\';
        push @out, '\\hline';
    }
    push @out, qq|\\end{tabular}|;
    print join "\n", @out, '';
    print q|\end{document}|, "\n";
}
