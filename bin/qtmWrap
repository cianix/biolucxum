#!/usr/bin/perl

#
# Copyright 2019-2021 Luciano Xumerle. All rights reserved.
# Luciano Xumerle <luciano.xumerle@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use warnings;
use Cwd 'abs_path';
use Sys::Hostname;

my $addUMI = abs_path($0);
my @a      = split '/', $addUMI;
my $cmd    = pop @a;

my $BWA      = 'bwa';
my $SAMTOOLS = 'samtools';
my $FASTQC   = 'fastqc';
my $FASTP    = 'fastp';

$cmd =~ s/^.*\///;

my $HELP =
  qq{---------------------------------------------------------------------------
$cmd version 0.2.1 (Dec 30, 2021)
Copyright 2019-2021 by Luciano Xumerle <luciano.xumerle\@gmail.com>
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
---------------------------------------------------------------------------
SYNTAX:

FastQC wrapper
--------------
 > $cmd fastqc [-fastqc <path>] [-noTrim] <file1.fastq.gz> [file2.fastq.gz]
 > $cmd fastqc [-fastqc <path>] [-noTrim] <fastqDir>

fastp wrapper
-------------
 > $cmd fastp [-fastp <path>] <file1.fastq.gz> [file2.fastq.gz]

BWA-mem wrapper
---------------
 > $cmd map [-bwa <path>] [-samtools <path>] [-o dest.bam] <ref.fasta> <file1.fastq[.gz]> [file2.fastq[.gz]] [umi.fastq[.gz]] <#CPU>

 > bwa mem <ref.fasta> <read1.fastq.gz> <read2.fastq.gz> | $cmd <readUMI.fastq.gz> > map.sam

NOTE: UMI fastq file is accepted as third fastq input

To trim reads length in fastq file
----------------------------------
 > $cmd trimReads <file.fastq> <length>\n\n};

my $mapBWA = 0;
my $trim   = 0;
my $fastqc = 0;
my $fastp  = 0;

my $FASTA   = '';
my $f1      = '';
my $f2      = '';
my $umi     = '';
my $cpu     = 0;
my $outFile = '';
my $noTrim  = 0;
my $dir     = '';

my $old = '';
foreach my $file (@ARGV)
{
    if ( $file eq 'map' )
    {
        $mapBWA++;
    }
    elsif ( $file eq 'trimReads' )
    {
        $trim++;
    }
    elsif ( $file eq 'fastqc' )
    {
        $fastqc++;
    }
    elsif ( $file eq 'fastp' )
    {
        $fastp++;
    }
    elsif ( -d $file )
    {
        $dir = abs_path($file);
    }
    elsif ( -f $file )
    {
        if ( $file =~ m/\.fastq/ || $file =~ m/\.fq/ )
        {
            if ( $f1 eq '' )
            {
                $f1 = abs_path($file);
            }
            elsif ( $f2 eq '' )
            {
                $f2 = abs_path($file);
            }
            elsif ( $umi eq '' )
            {
                $umi = abs_path($file);
            }
            else
            {
                &log("ERROR: More than 2+UMI fastq files in input!!!\n");
                exit;
            }
        }
        elsif ( $file =~ m/\.fa/ )
        {
            $FASTA = abs_path($file);
        }
        elsif ( $old eq '-bwa' )
        {
            $BWA = abs_path($file);
        }
        elsif ( $old eq '-samtools' )
        {
            $SAMTOOLS = abs_path($file);
        }
        elsif ( $old eq '-fastqc' )
        {
            $FASTQC = abs_path($file);
        }
        elsif ( $old eq '-fastp' )
        {
            $FASTP = abs_path($file);
        }
    }
    elsif ( $file =~ m/.bam$/ && $old eq '-o' )
    {
        $outFile = $file;
    }
    elsif ( $file =~ m/^\d+$/ )
    {
        $cpu = $file;
    }
    elsif ( $file eq '-noTrim' )
    {
        $noTrim++;
    }
    $old = $file;
}

#
# manage out file
#
$outFile = 'start_sorted.bam' if ( $outFile eq '' );

if ( $mapBWA > 0 && $f1 ne '' && $FASTA ne '' )
{
    my @tt   = split /\//, $f1;
    my $NAME = $tt[-2];
    my $ID   = time;

    &bwa(
        $BWA,   $SAMTOOLS, $addUMI, $cpu, $ID, $NAME,
        $FASTA, $outFile,  $f1,     $f2,  $umi
    );

    &flagstat( $SAMTOOLS, $cpu, $outFile );
}
elsif ( $trim > 0 && -f $f1 && $f2 eq '' && $cpu > 0 )
{
    &trimReads( $f1, $cpu );
}
elsif ( $fastqc > 0 && ( $f1 ne '' || $dir ne '' ) )
{
    &fastqc( $f1, $f2, $dir, $noTrim, $FASTQC );
}
elsif ( $fastp > 0 && $f1 ne '' )
{
    &fastp( $f1, $f2, $FASTP );
}
elsif ( $f1 ne '' )
{
    &addUMI($f1);
}
else
{
    &log($HELP);
}

#
# ADD UMI TO BWA SAM OUTPUT
#
sub addUMI
{
    my $umiFile = shift;
    my $id      = '';
    my $umi     = '';
    my $none    = '';

    if ( $umiFile =~ m/gz/ )
    {
        open( FILE, "gzip -dc $ARGV[0] | " ) || die;
    }
    else
    {
        open( FILE, $umiFile ) || die;
    }

    while (<STDIN>)
    {
        chomp;

        if (m/^\@/) { print "$_\n"; next; }

        my @a = split /\t/;
        while ( $a[0] ne $id )
        {
            $id = <FILE>;
            chomp $id;
            $id =~ s/\s+.*$//;
            $id =~ s/^.//;
            $umi = <FILE>;
            chomp $umi;
            $none = <FILE>;
            $none = <FILE>;
        }

        print join "\t", @a, qq|RX:Z:$umi\n|;
    }
    close FILE;
}

#
# MAKE FLAGSTAT WITH SAMTOOLS
#
sub flagstat
{
    my $samtools = shift;
    my $ths      = shift;
    my $bam      = shift;

    &log("flagstat START at ###");
    open( FLAGSTAT, "$samtools flagstat -@ $ths $bam | " ) || die;
    my $flags = $bam;
    $flags =~ s/.bam$/.flagstat/i;
    open( FLAGOUT, ">$flags" ) || die;
    while (<FLAGSTAT>) { print FLAGOUT $_; }
    close FLAGOUT;
    close FLAGSTAT;
    &log("flagstat END at ###");
}

#
# MAKE BAM FILE WITH BWA
#
sub bwa
{
    my $BWA      = shift;
    my $SAMTOOLS = shift;
    my $addUMI   = shift;
    my $cpu      = shift;
    my $ID       = shift;
    my $NAME     = shift;
    my $FASTA    = shift;
    my $dest     = shift;
    my $f1       = shift;
    my $f2       = shift;
    my $umi      = shift;

    # check for existing out file
    if ( -f $outFile )
    {
        &log( $HELP . "$outFile was already created!\n" );
        exit;
    }

    #
    # manage thread and hostname
    #
    my $hostname = hostname;
    if ( $cpu < 1 )
    {
        open( PROC, '/proc/cpuinfo' )
          || die "Can't open /proc/cpuinfo file\n\n";
        while (<PROC>) { $cpu++ if (m/processor\s*:\s*\d/); }
        close PROC;
    }

    &log( "BWA started on $hostname at " . scalar( localtime() ) );
    &log(
        qq|
FASTQ1: $f1
FASTQ2: $f2
   UMI: $umi
   REF: $FASTA
  NAME: $NAME
    ID: $ID
   CPU: $cpu in $hostname|
    );

    my $RG = join "\\t", '"@RG', "ID:$ID", 'PU:lane', "LB:$NAME", "SM:$NAME",
      'CN:PersonalGenomics', 'PL:ILLUMINA"';

    my $scpu = 1;
    $scpu = int( $cpu / 5 ) if ( $cpu > 9 );
    my $bcpu = $cpu - $scpu;

    if ( $umi eq '' )
    {
`$BWA mem -R $RG -t $bcpu $FASTA $f1 $f2 | $SAMTOOLS sort --threads $scpu - -o $dest`;
    }
    else
    {
        $bcpu--;
`$BWA mem -R $RG -t $bcpu $FASTA $f1 $f2 | $addUMI $umi | $SAMTOOLS sort --threads $scpu - -o $dest`;
    }
    &log( "BWA finished on $hostname at " . scalar( localtime() ) );

    # index with sambamba
    &log("Index START at ###");
    system( $SAMTOOLS, 'index', '-@' . $cpu, $dest );
    &log("Index END at ###");
}

#
# TRIM READS LENGTH IN FASTQ
#
sub trimReads
{
    my $fastq = shift;
    my $len   = shift;

    if ( $fastq =~ m/gz$/i )
    {
        open( FIN, "gzip -dc \"$fastq\" | " ) || die;
    }
    else
    {
        open( FIN, $fastq ) || die;
    }

    &log("Trim reads length START at ###");
    my $dest = $fastq;
    $dest =~ s/.fastq/-trim$len.fastq/;
    $dest =~ s/.fq/-trim$len.fq/;
    open( FOUT, " | gzip > \"$dest\"" ) || die;

    while (<FIN>)
    {
        my $seq = <FIN>;
        my $q   = <FIN>;
        $q = <FIN>;

        chomp $seq;
        chomp $q;
        print FOUT $_, substr( $seq, 0, $len ), "\n+\n", substr( $q, 0, $len ),
          "\n";
    }
    close FOUT;
    close FIN;
    &log("Trim reads length END at ###");
}

#
# FASTQC
#
sub fastqc
{
    my $f1     = shift;
    my $f2     = shift;
    my $dir    = shift;
    my $noTrim = shift;
    my $FASTQC = shift;

    my @fastq = ();
    if ( $dir ne '' )
    {
        chdir($dir);
        foreach my $ff ( glob("*.fastq.gz"), glob("*.fq.gz") )
        {
            push @fastq, abs_path($ff);
        }
    }
    push @fastq, $f1 if ( $f1 ne '' );
    push @fastq, $f2 if ( $f2 ne '' );

    if ( $noTrim > 0 )
    {
        my @run = ();
        foreach my $f (@fastq)
        {
            push @run, $f if ( $f !~ m/trimmed..fastq.gz$/ );
        }
        @fastq = @run;
    }

    if ( defined $fastq[0] )
    {
        my @a = split '/', $fastq[0];
        $a[-1] = 'fastqc';
        my $dest = join '/', @a;
        if ( -d $dest )
        {

            &log( $HELP . "Found directory fastqc. Nothing to do!!!\n" );
            exit;
        }

        my $cpu = $#fastq + 1;

        &log("FastQC START at ###");
        &log(qq|     FastQC: $FASTQC|);
        &log( qq|fastq files: | . ( join "; ", @fastq ) );
        &log(qq|Destination: $dest\n---|);

        mkdir($dest);
        system( $FASTQC, '-t', $cpu, '-o', $dest, '-f', 'fastq', @fastq );
        &log("FastQC END at ###");
    }
}

#
# fastp
#
sub fastp
{
    my $F1  = shift;
    my $F2  = shift;
    my $exe = shift;
    my $cpu = shift;

    my $DIR      = '';
    my $ADAPTERS = q|>multiplexing-forward
GATCGGAAGAGCACACGTCT
>solexa-forward
AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT
>truseq-forward-contam
AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC
>truseq-reverse-contam
AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTA
>nextera-forward-read-contam
CTGTCTCTTATACACATCTCCGAGCCCACGAGAC
>nextera-reverse-read-contam
CTGTCTCTTATACACATCTGACGCTGCCGACGA
>solexa-reverse
AGATCGGAAGAGCGGTTCAGCAGGAATGCCGAG
>PrefixNX/1
AGATGTGTATAAGAGACAG
>Trans1
TCGTCGGCAGCGTCAGATGTGTATAAGAGACAG
>Trans2
GTCTCGTGGGCTCGGAGATGTGTATAAGAGACAG
>PrefixPE/1
AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT
>PrefixPE/2
CAAGCAGAAGACGGCATACGAGATCGGTCTCGGCATTCCTGCTGAACCGCTCTTCCGATCT
>PCR_Primer1_rc
AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATT
>PCR_Primer2_rc
AGATCGGAAGAGCGGTTCAGCAGGAATGCCGAGACCGATCTCGTATGCCGTCTTCTGCTTG
>FlowCell1
TTTTTTTTTTAATGATACGGCGACCACCGAGATCTACAC
>FlowCell2
TTTTTTTTTTCAAGCAGAAGACGGCATACGA
>TruSeq2_SE
AGATCGGAAGAGCTCGTATGCCGTCTTCTGCTTG
>PrefixPE/1
TACACTCTTTCCCTACACGACGCTCTTCCGATCT
>PrefixPE/2
GTGACTGGAGTTCAGACGTGTGCTCTTCCGATCT
>MGI_adapter_forward
AAGTCGGATCGTAGCCATGTCGTTCTGTGAGCCAAGGAGTTG
>MGI_adapter_reverse
AAGTCGGAGGCCAAGCGGTCTTAGGAAGACAA
|;

    if ( $F1 ne '' )
    {
        my @a = split '/', $F1;
        pop @a;
        $DIR = join '/', @a if ( $DIR eq '' );
    }

    if ( -f 'trimmed1.fastq.gz' )
    {
        &log( $HELP . "File trimmed1.fastq.gz already produced!\n" );
        return;
    }

    open( ADAPT, '>adapters.fasta' ) || die;
    print ADAPT $ADAPTERS;
    close ADAPT;

    &log("Fastp START on file $F1 $F2 at ###");

    my @common = (
        '--length_required',             36,
        '--adapter_fasta',               'adapters.fasta',
        '--cut_right',                   '--cut_right_window_size',
        4,                               '--cut_right_mean_quality',
        15,                              '--trim_poly_g',
        '--overrepresentation_analysis', '-w',
        $cpu
    );

    if ( $F2 eq '' )
    {
        system( $exe, '-i', $F1, '-o', 'trimmed1.fastq.gz', '--failed_out',
            'failed.fastq.gz', @common );
    }
    else
    {
        system( $exe, '-i', $F1, '-I', $F2, '-o', 'trimmed1.fastq.gz', '-O',
            'trimmed2.fastq.gz', '--failed_out', 'failed.fastq.gz', @common );
    }
    unlink( 'adapters.fasta', 'failed.fastq.gz' );
    &log("Fastp END at ###");
}

#
# PRINT A LOG MESSAGE
# String ### is replaced by the localtime sscalar
#
sub log
{
    my $message = shift;
    my $date    = scalar(localtime);
    $message =~ s/###/$date/;
    print STDERR $message, "\n";
}
